-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.addresses (
  user_id text NOT NULL,
  address text NOT NULL,
  latitude double precision NOT NULL,
  longitude double precision NOT NULL,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  is_default boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT addresses_pkey PRIMARY KEY (id),
  CONSTRAINT addresses_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.usuarios(firebase_uid)
);
CREATE TABLE public.admin (
  usuario text NOT NULL,
  contraseña text NOT NULL UNIQUE,
  CONSTRAINT admin_pkey PRIMARY KEY (usuario, contraseña)
);
CREATE TABLE public.carrito (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  cantidad integer NOT NULL DEFAULT 1,
  producto_id bigint,
  user_id text,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT carrito_pkey PRIMARY KEY (id),
  CONSTRAINT carrito_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.usuarios(firebase_uid),
  CONSTRAINT carrito_producto_id_fkey FOREIGN KEY (producto_id) REFERENCES public.producto(id)
);
CREATE TABLE public.favorites (
  user_id text,
  producto_id bigint NOT NULL,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT favorites_pkey PRIMARY KEY (id),
  CONSTRAINT favorites_producto_id_fkey FOREIGN KEY (producto_id) REFERENCES public.producto(id),
  CONSTRAINT favorites_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.usuarios(firebase_uid)
);
CREATE TABLE public.processed_stripe_events (
  event_id text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT processed_stripe_events_pkey PRIMARY KEY (event_id)
);
CREATE TABLE public.producto (
  amount text,
  category text NOT NULL DEFAULT ''::text,
  description text,
  unit text,
  in_stock boolean NOT NULL,
  rating numeric,
  reviews integer,
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  image_url character varying,
  name character varying,
  price double precision NOT NULL,
  CONSTRAINT producto_pkey PRIMARY KEY (id)
);
CREATE TABLE public.purchase_items (
  purchase_id uuid,
  product_id bigint,
  quantity integer NOT NULL,
  price_cents integer NOT NULL,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  CONSTRAINT purchase_items_pkey PRIMARY KEY (id),
  CONSTRAINT purchase_items_purchase_id_fkey FOREIGN KEY (purchase_id) REFERENCES public.purchases(id),
  CONSTRAINT purchase_items_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.producto(id)
);
CREATE TABLE public.purchase_locks (
  session_id text NOT NULL,
  locked_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone NOT NULL DEFAULT (now() + '00:05:00'::interval),
  CONSTRAINT purchase_locks_pkey PRIMARY KEY (session_id)
);
CREATE TABLE public.purchases (
  created_at timestamp with time zone DEFAULT now(),
  total_price numeric NOT NULL,
  user_id text NOT NULL,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  products jsonb,
  notification_sent boolean NOT NULL DEFAULT false,
  notified_at timestamp with time zone,
  delivery_address_id uuid,
  stripe_session_id text,
  total_cents integer,
  status USER-DEFINED DEFAULT 'Pendiente'::purchase_status,
  CONSTRAINT purchases_pkey PRIMARY KEY (id),
  CONSTRAINT purchases_delivery_address_id_fkey FOREIGN KEY (delivery_address_id) REFERENCES public.addresses(id),
  CONSTRAINT purchases_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.usuarios(firebase_uid)
);
CREATE TABLE public.purchases_audit (
  purchase_id uuid,
  inserted_at timestamp without time zone,
  inserted_by text,
  id integer NOT NULL DEFAULT nextval('purchases_audit_id_seq'::regclass),
  CONSTRAINT purchases_audit_pkey PRIMARY KEY (id)
);
CREATE TABLE public.usuarios (
  email text UNIQUE,
  firebase_uid text UNIQUE,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  avatar_url text,
  push_token text,
  nombre text,
  created_at timestamp with time zone,
  CONSTRAINT usuarios_pkey PRIMARY KEY (id)
);